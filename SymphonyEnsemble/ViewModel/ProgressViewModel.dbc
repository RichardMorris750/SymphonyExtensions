;; **********************************************************************
;; 
;; Title:       ProgressViewModel.dbc
;; 
;; Type:        Class
;; 
;; Description: progress bar view model class
;; 
;; Author:      Richard C. Morris, Synergex Professional Services Group
;;
;; Copyright (c) 2012, Synergex International, Inc. All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************
import System
import System.Collections.Generic
import System.Text
import Symphony.Ensemble.Data


namespace Symphony.Ensemble.ViewModel

	;;; <summary>
	;;;  View model class to allow binding of data and commands between progress bar view and UI Toolkit host
	;;; </summary>
	public class ProgressViewModel
		
		private mWindow	,@System.Windows.FrameworkElement

.region "Constructor"

		public method ProgressViewModel
			window						,@System.Windows.FrameworkElement
			endparams
		proc
			mProgressData = new ProgressBindingData()
			mWindow = window
		endmethod

.endregion

.region "Properties"

		private mProgressData	,@ProgressBindingData

		;;; <summary>
		;;;  Binding data point between View and UI Toolkit host.
		;;; </summary>
		public property ProgressData, @ProgressBindingData
			method get
			proc
				mreturn mProgressData
			endmethod
			method set
			proc
				mProgressData = value
			endmethod
		endproperty
		
.endregion

.region "Methods"

		;;; <summary>
		;;;  Force the current value to increment
		;;; </summary>
		public method Increment, void
			endparams
		proc
			if (ProgressData.CurrentValue < ProgressData.MaxValue)
				ProgressData.CurrentValue = ProgressData.CurrentValue + 1
			mWindow.UpdateLayout()
		endmethod

		;;; <summary>
		;;;	force the progress value to be maxed out
		;;; </summary>
		public method MaxItOut, void
			endparams
		proc
			ProgressData.CurrentValue = ProgressData.MaxValue
			mWindow.UpdateLayout()
		endmethod

.endregion

	endclass

endnamespace

