import Symphony.Concerto
;;**********************************************************************
;;
;; Title:       WindowEventDispatcher.dbl
;;
;; Type:        function
;;
;; Description: Standard windows event dispatcher routine
;;
;; Author:      Richard C. Morris, Synergex Professional Services Group
;;
;; Copyright (c) 2012, Synergex International, Inc. All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************
.function WindowEventDispatcher ,^val ,reentrant
	reserved1			,a		; Reserved by system
	reserved2			,a		; Reserved by system
	^val(a_wndid)		,i		; Window id receiving event
	^val(a_event)		,i		; Mouse/window event
	^val(a_cellwidth)	,i		; Height of logical window (Number of columns)
	^val(a_cellheight)	,i		; Width of logical window (Number of columns)
	^val(a_pixwidth)	,i		; Height of client area (Number of pixels)
	^val(a_pixheight)	,i		; Width of client area (Number of pixels)
	endparams

.include "WND:tools.def"

record
	item	,@windowDetails
endrecord

.proc
	foreach item in Symphony.Concerto.SetEventDispatcher.WindowList
	begin
		if (item.id == a_wndid)
		begin
			ResizeControl(item.obj, a_wndid, a_pixwidth, a_pixheight)
			exitloop
		end
	end
	freturn TRUE
.end

